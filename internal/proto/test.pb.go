// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpperRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperRequest) Reset()         { *m = UpperRequest{} }
func (m *UpperRequest) String() string { return proto.CompactTextString(m) }
func (*UpperRequest) ProtoMessage()    {}
func (*UpperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *UpperRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperRequest.Unmarshal(m, b)
}
func (m *UpperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperRequest.Marshal(b, m, deterministic)
}
func (m *UpperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperRequest.Merge(m, src)
}
func (m *UpperRequest) XXX_Size() int {
	return xxx_messageInfo_UpperRequest.Size(m)
}
func (m *UpperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpperRequest proto.InternalMessageInfo

func (m *UpperRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UpperResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperResponse) Reset()         { *m = UpperResponse{} }
func (m *UpperResponse) String() string { return proto.CompactTextString(m) }
func (*UpperResponse) ProtoMessage()    {}
func (*UpperResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *UpperResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperResponse.Unmarshal(m, b)
}
func (m *UpperResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperResponse.Marshal(b, m, deterministic)
}
func (m *UpperResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperResponse.Merge(m, src)
}
func (m *UpperResponse) XXX_Size() int {
	return xxx_messageInfo_UpperResponse.Size(m)
}
func (m *UpperResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpperResponse proto.InternalMessageInfo

func (m *UpperResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*UpperRequest)(nil), "proto.UpperRequest")
	proto.RegisterType((*UpperResponse)(nil), "proto.UpperResponse")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x4a, 0x5c, 0x3c, 0xa1, 0x05,
	0x05, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x25, 0xa9,
	0x15, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x32, 0x17, 0x2f, 0x54,
	0x4d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x36, 0x45, 0x46, 0xae, 0x5c, 0xdc, 0x21, 0xa9, 0xc5,
	0x25, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x66, 0x5c, 0xec, 0x21, 0xf9, 0x60, 0x5d,
	0x42, 0xc2, 0x10, 0x1b, 0xf5, 0x90, 0xed, 0x91, 0x12, 0x41, 0x15, 0x84, 0x18, 0xac, 0xc4, 0x90,
	0xc4, 0x06, 0x16, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xa8, 0x1c, 0x67, 0xab, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	ToUpper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) ToUpper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperResponse, error) {
	out := new(UpperResponse)
	err := c.cc.Invoke(ctx, "/proto.TestService/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	ToUpper(context.Context, *UpperRequest) (*UpperResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestService/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ToUpper(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _TestService_ToUpper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
